

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          =env("DATABASE_URL")
  relationMode = "prisma"
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
enum Role {
  customer
  service_provider 
}
enum BookingStatus{
  pending
  confrimd
  cancel
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  username String? @unique
  image       String?
  accounts    Account[]
  sessions    Session[]
  stripeCustomerId String? @unique
  hasAccess  Boolean   @default(false)
  role          Role?
  serviceProviderProfile  ServiceProvider?
    bookings        Booking[]
    contectReview  contectReview[]


}
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   @unique 
  token      String   
  expires    DateTime
}


model ServiceProvider {
  id           String @id @default(cuid())
  businessName String @unique 
  phoneNumber  String @unique 
  contactEmail String @unique 
  
 
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  
  
  userId       String   @unique 
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 services     Service[]
 
  businessHours BusinessHours[]

  bookings     Booking[]

  @@map("service_providers")
}
model Service {
  id                String   @id @default(cuid())
  name              String
  description       String?  @db.Text
  price             Int
  durationInMinutes Int   
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  
  serviceProviderId String
  ServiceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  
  bookings          Booking[]

  @@map("services")
}
model BusinessHours {
  id        String @id @default(cuid())
  
  dayOfWeek Int
 
  startTime String
  
  endTime   String

 
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("business_hours")
}
model Booking {
  id                String          @id @default(cuid())
  startTime         String
  endTime           String
  status            BookingStatus?  @default(pending)
  date              DateTime // Changed from String to DateTime for proper date handling
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  slot              String
  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model contectReview{
  id      String          @id @default(cuid())
  email   String    
  content String
  userId  String? 
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

}